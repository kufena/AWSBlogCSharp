@page "/fetchdata"
@inject NavigationManager Navigation

<h1>All blog posts.</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (blogposts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Text</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (id, blog) in blogposts)
            {
                <tr>
                    <td>@blog.Date.ToShortDateString()</td>
                    <td>@blog.Title</td>
                    <td><button @onclick="@(() => NavigateToCounterComponent(id))">View</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Dictionary<int, BlogPostURL> blogposts;

    public void NavigateToCounterComponent(int id)
    {
        Navigation.NavigateTo($"displaypage/{id}");
    }

    protected override async Task OnInitializedAsync()
    {

        // Initialize the Amazon Cognito credentials provider
        /*CognitoAWSCredentials credentials = new CognitoAWSCredentials(
            "eu-west-2:8d0ca14e-4794-4325-9a2f-2c26d7c7075e", // Identity pool ID
            RegionEndpoint.EUWest2 // Region
        );*/
        /*
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);

        var payload = JwtPayload.Deserialize(Statics.authResponse.AuthenticationResult.IdToken);
        
        var user = userPool.GetUser("fairtomiddlingster@gmail.com");

        var credentials = new CognitoAWSCredentials(
        user.ClientID,
        Statics.identityPoolID,
        "",
        "",
        Amazon.RegionEndpoint.EUWest2);

        var creds = await credentials.GetCredentialsAsync();
        */


        string url = Statics.apiURL;
        blogposts = new Dictionary<int, BlogPostURL>();
        HttpRequestMessage hrm = new HttpRequestMessage
        {
            RequestUri = new Uri(url)
        };
        hrm.Headers.Add("Authorization", Statics.id_token);
        var hufflepuff = new HttpClient(new HttpClientHandler());
        var response = await hufflepuff.SendAsync(hrm);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var blogstr = await response.Content.ReadAsStringAsync();
            var blogs = JsonSerializer.Deserialize<BlogPostURL[]>(blogstr);
            foreach (var b in blogs) blogposts.Add(b.Id, b);
        }
        else
        {
            Console.WriteLine($"Expected better.  {response.StatusCode} {response.ReasonPhrase} {response.RequestMessage}");
        }
    }
}

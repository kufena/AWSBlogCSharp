@page "/displaypage/{id:int}"
@inject SessionState Statics
@inject NavigationManager Navigation

<h3>DisplayPage</h3>

Title:  <input type="text" @bind-value="model.Title" />
<br />
Text: <textarea cols="40" rows="15" @bind="model.Text" />
<br/>
<label><input type="checkbox" @bind-value="model.Status"/>Published</label>

<br />
<button @onclick="Submit" disabled="@button">Update</button>
@code { 
    [Parameter]
    public int id { get; set; }

    BlogPostModel model;
    bool button = false;

    protected override async Task OnInitializedAsync()
    {
        model = new BlogPostModel
        {
            Title = "",
            Text = "",
            Status = false
        };

        string nickname = (string)Statics.myidtoken.Payload["nickname"];
        var url = $"{Statics.apiURL}{nickname}/blog/{id}";
        //var url = $"{Statics.apiURL}{Statics.credentials.GetIdentityId()}/blog/{id}";
        var client = new HttpClient();
        var response = await client.GetAsync(url, regionName: "eu-west-2", serviceName: "execute-api", credentials: Statics.creds);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var modelstr = await response.Content.ReadAsStringAsync();
            model = JsonSerializer.Deserialize<BlogPostModel>(modelstr);
            StateHasChanged();
        }
    }

    private async void Submit()
    {
        button = false;
        StateHasChanged();

        Thread.Sleep(5000);

        HttpClient client = new HttpClient();
        var content = new StringContent(JsonSerializer.Serialize<BlogPostModel>(model));
        content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
        //"application/json";

        var sub = await Statics.credentials.GetIdentityIdAsync();
        string nickname = (string)Statics.myidtoken.Payload["nickname"];
        var url = $"{Statics.apiURL}{nickname}/blog/{id}";

        var message = new HttpRequestMessage
        {
            RequestUri = new Uri(url),
            Method = HttpMethod.Put,
            Content = content
        };
        var response = await client.SendAsync(
                                        message,
                                        regionName: RegionEndpoint.EUWest2.SystemName,
                                        serviceName: "execute-api",
                                        credentials: Statics.creds);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Console.WriteLine("Seems ok");
            Navigation.NavigateTo("/fetchdata");
        }
        else
        {
            Console.WriteLine("Failed to PUT new message.");
            Navigation.NavigateTo("/fetchdata");
        }
    }
}

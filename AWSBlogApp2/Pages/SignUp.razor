@page "/signup"
@using Amazon.Auth;
@using Amazon.CognitoIdentity;
@using Amazon.CognitoIdentityProvider;
@using Amazon.CognitoIdentity.Model;
@using Amazon.CognitoIdentityProvider.Model;
@using Amazon.Runtime;
@using Amazon.Extensions.CognitoAuthentication;

<h3>SignUp</h3>
<p>
    Register Here::
    <br /><input type="text" @bind="email" name="Email:" />
    <br /><input type="password" @bind="password" name="Password:" />
    <br /><input type="text" @bind="nickname" name="Nickname:" />
    <br /><button @onclick="Register">Register</button>
</p>

<p>
    Code::
    <br /><input type="text" @bind="email" name="Email:" />
    <br /><input type="text" @bind="code" name="Code:" />
    <br /><button @onclick="Confirm">Confirm Registration</button>
</p>
<p>
    Sign in::
    <br /><input type="text" @bind="email" name="Email:" />
    <br /><input type="password" @bind="password" name="Password:" />
    <br /><button @onclick="SignIn">Sign In</button>
</p>

@code {

    string email = "";
    string password = "";
    string nickname = "";
    string code = "";

    string poolID = "eu-west-2_MuGaaOD30";
    string clientID = "19q6odo7f0uq9td902ibofg5p3";
    
    //ApiURL                         https://9kw03scz06.execute-api.eu-west-2.amazonaws.com/Prod/

    private async void Register()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(poolID, clientID, provider);

        var useratts = new Dictionary<string, string>();
        useratts.Add("nickname", nickname);

        //var user = new CognitoUser(email, clientID, userPool, provider, null, null, null, useratts);

        Console.WriteLine($"Adding user {email} nickname {nickname}");

        //AuthFlowResponse authResponse = await user.StartWithSrpAuthAsync(new InitiateSrpAuthRequest()
        //{
        //    Password = password,
        //}).ConfigureAwait(false);

        await userPool.SignUpAsync(email, password, useratts, new Dictionary<string,string>());
        Console.WriteLine("Done sign up async.");
    }


    private async void Confirm()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(poolID, clientID, provider);

        var user = new CognitoUser(email, clientID, userPool, provider);

        Console.WriteLine($"Adding user {email} confirmation");

        await user.ConfirmSignUpAsync(code, false).ConfigureAwait(false);

        //await userPool.SignUpAsync(email, password, attributes, new Dictionary<string,string>());
        Console.WriteLine("Done confirm async.");
    }

    private async void SignIn()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(poolID, clientID, provider);
        var user = new CognitoUser(email, clientID, userPool, provider);

        AuthFlowResponse authResponse = await user.StartWithSrpAuthAsync(new InitiateSrpAuthRequest()
        {
            Password = password
        }).ConfigureAwait(false);
    }
}

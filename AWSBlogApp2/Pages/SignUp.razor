@page "/signup"
@using Amazon.Auth;
@using Amazon.CognitoIdentity;
@using Amazon.CognitoIdentityProvider;
@using Amazon.CognitoIdentity.Model;
@using Amazon.CognitoIdentityProvider.Model;
@using Amazon.Runtime;
@using Amazon.Extensions.CognitoAuthentication;

<h3>SignUp</h3>
<p>
    Register Here::
    <br />Email: <input type="text" @bind="email" name="Email:" />
    <br />Password: <input type="password" @bind="password" name="Password:" />
    <br />Nickname: <input type="text" @bind="nickname" name="Nickname:" />
    <br /><button @onclick="Register">Register</button>
</p>

<p>
    Code::
    <br />Email: <input type="text" @bind="email" name="Email:" />
    <br />Code: <input type="text" @bind="code" name="Code:" />
    <br /><button @onclick="Confirm">Confirm Registration</button>
</p>
<p>
    Sign in::
    <br />Email: <input type="text" @bind="email" name="Email:" />
    <br />Password: <input type="password" @bind="password" name="Password:" />
    <br /><button @onclick="SignIn">Sign In</button>
    <br /><button @onclick="LogOut">Log Out</button>
</p>

<p>
    <button @onclick="What">What!</button>
</p>

@code {

    string email = "";
    string password = "";
    string nickname = "";
    string code = "";



    private async void Register()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);

        var useratts = new Dictionary<string, string>();
        useratts.Add("nickname", nickname);

        Console.WriteLine($"Adding user {email} nickname {nickname}");
        try
        {
            await userPool.SignUpAsync(email, password, useratts, new Dictionary<string, string>());
            Console.WriteLine("Done sign up async.");
        } catch (Exception e)
        {
            Console.WriteLine("Something went wrong.");
            Console.WriteLine(e.ToString());
        }
    }


    private async void Confirm()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);

        var user = new CognitoUser(email, Statics.clientID, userPool, provider);

        Console.WriteLine($"Adding user {email} confirmation");

        await user.ConfirmSignUpAsync(code, false).ConfigureAwait(false);

        //await userPool.SignUpAsync(email, password, attributes, new Dictionary<string,string>());
        Console.WriteLine("Done confirm async.");
    }

    private async void SignIn()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);
        var user = new CognitoUser(email, Statics.clientID, userPool, provider);

        Statics.authResponse = await user.StartWithSrpAuthAsync(new InitiateSrpAuthRequest()
        {
            Password = password
        }).ConfigureAwait(false);

        Statics.access_token = Statics.authResponse.AuthenticationResult.AccessToken;
        Statics.id_token = Statics.authResponse.AuthenticationResult.IdToken;
        Statics.refresh_token = Statics.authResponse.AuthenticationResult.RefreshToken;

        var myidtoken = new JwtSecurityToken(Statics.id_token);
        var myaccesstoken = new JwtSecurityToken(Statics.access_token);
        Console.WriteLine(myidtoken);
        Console.WriteLine(myaccesstoken);

        var credentials = new CognitoAWSCredentials(Statics.identityPoolID, RegionEndpoint.EUWest2);

        var providername = $"cognito-idp.{RegionEndpoint.EUWest2.SystemName}.amazonaws.com/{Statics.poolID}";
        Console.WriteLine(providername);
        credentials.AddLogin(providername, Statics.id_token);
        var creds = credentials.GetCredentials();
        Console.WriteLine(creds);

    }

    private void What()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);
        try
        {
            var currentuser = userPool.GetUser();
            Console.WriteLine($"{currentuser.Username} {currentuser.UserID}");
            if (Statics.authResponse != null)
            {
                Console.WriteLine($"Should be ok = we are logged in!");
            }
        }
        catch(Exception e)
        {
            Console.WriteLine("Exception!");
            Console.WriteLine(e.ToString());
        }
    }

    private async void LogOut()
    {
        var provider = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), Amazon.RegionEndpoint.EUWest2);
        var userPool = new CognitoUserPool(Statics.poolID, Statics.clientID, provider);

        if (Statics.authResponse == null)
        {
            Console.WriteLine("Not logged in");
            return;
        }

        var response = await provider.GetUserAsync(new GetUserRequest
        {
            AccessToken = Statics.authResponse.AuthenticationResult.AccessToken
        });
        Console.WriteLine($"User :: {response.Username}");
        var atts = response.UserAttributes;
        foreach(var att in atts)
        {
            Console.WriteLine($"{att.Name} to {att.Value}");
        }
        var soresp = await provider.GlobalSignOutAsync(new GlobalSignOutRequest
        {
            AccessToken = Statics.authResponse.AuthenticationResult.AccessToken
        });
        Console.WriteLine($"Response of signout:: {soresp.HttpStatusCode}");
        Console.WriteLine($"{soresp.ResponseMetadata.ToString()}");

        if (soresp.HttpStatusCode == System.Net.HttpStatusCode.OK)
        {
            Statics.authResponse = null;
        }
    }
}

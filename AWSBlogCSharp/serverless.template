{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application for a blog API.",
  "Resources": {
    "BlogPostUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "DeletionPolicy" : "Delete",
      "Properties": {
       "UserPoolName" : "BlogPostUserPool",
       "AccountRecoverySetting" : {
         "RecoveryMechanisms" : [
         {
           "Name" : "verified_email",
           "Priority" : 1
         }]
       },
       "EmailConfiguration" : {
          "EmailSendingAccount" : "COGNITO_DEFAULT"
        },
        "AutoVerifiedAttributes" : ["email"],
        "UsernameAttributes" : ["email"],
        "Policies" : {
         "PasswordPolicy" : {
          "MinimumLength" : 9,
          "RequireLowercase" : true,
          "RequireUppercase": true,
          "RequireNumbers" : true,
          "RequireSymbols" : false,
          "TemporaryPasswordValidityDays" : 7
          }
        },
        "AdminCreateUserConfig" : {
            "AllowAdminCreateUserOnly" : false
        },
        "Schema" : [ 
                    {
                    "Name" : "email",
                    "AttributeDataType" : "String",
                    "Required": true
                    },
                    {
                      "Name" : "nickname",
                      "AttributeDataType": "String",
                      "Required": true
                    }
                   ]
       }
    },
    "BlogPostUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId" : { "Ref" : "BlogPostUserPool" },
        "ClientName" : "BlogPostUserPoolClient",
        "GenerateSecret" : false
      }
    },
    "MyApi": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
          "MethodSettings": [
              {"HttpMethod":"GET", "ResourcePath": "/"},
              {"HttpMethod":"GET", "ResourcePath": "/blog/{id}"},
              {"HttpMethod":"POST", "ResourcePath": "/blog/"},
              {"HttpMethod":"PUT", "ResourcePath": "/blog/{id}"}
              ],         
          "StageName": "Prod",
          "Cors": {
              "AllowMethods": "'*'",
              "AllowOrigin": "'*'"
          },
          "Auth" : {
             "Authorizers": {
               "MyAuthorizer": {
                 "UserPoolArn": {"Fn::GetAtt" : [ "BlogPostUserPool","Arn"]}
               }
             },
             "DefaultAuthorizer": "MyAuthorizer"
          }
        }
      },
    "InvokeRoleAll": {
     "Type" : "AWS::IAM::Role",
     "Properties" : {
       "RoleName" : "InvokeRoleAll",
       "AssumeRolePolicyDocument" : {
         "Statement": {
           "Effect": "Allow",
           "Principal": { "Service": ["apigateway.amazonaws.com"] },
           "Action": "sts:AssumeRole",
           "Condition": {
               "StringEquals": {
                "cognito-identity.amazonaws.com:aud": "BlogPostIdentityPool"  
               },
               "ForAnyValue:StringLike":{ "cognito-identity.amazonaws.com:amr": "authenticated" 
               }
             }
           }
         },
       "Policies" : [
        {
          "PolicyName": "LambdaInvokePolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "execute-api:invoke"
                    ],
                    "Resource": ["*"]
                }
            ]
          }
        }
        ]
      }
    },
    "BlogPostIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
       "IdentityPoolName" : "BlogPostIdentityPool",
       "AllowClassicFlow" : false,
       "AllowUnauthenticatedIdentities" : false
      }
    },
    "MyIdentityPoolRoles": {
     "Type" : "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties" : {
       "IdentityPoolId" : {"Ref": "BlogPostIdentityPool"},
       "Roles": 
          { 
              "authenticated": {"Fn::GetAtt": ["InvokeRoleAll","Arn"]}
          }
      }
    },
    "Get": {
      "Type": "AWS::Serverless::Function",      
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsGetById::Get",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/{id}",
              "Method": "GET",
              "RestApiId": "MyApi",
              "Auth" : {
                "Authorizer" : "MyAuthorizer"
                }
            }
          }
        }
      }
    },
    "GetAll": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsGetAll::Get",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "RestApiId": "MyApi",
              "Auth" : {
                "Authorizer" : "MyAuthorizer"
                }
            }
          }
        }
      }
    },
    "Create": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsCreate::Create",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/",
              "Method": "POST",
              "RestApiId": "MyApi",
              "Auth" : {
                "Authorizer" : "MyAuthorizer"
                }
            }
          }
        }
      }
    },
    "Update": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsUpdate::Update",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonS3FullAccess",
          "AmazonRDSDataFullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/{id}",
              "Method": "PUT",
              "RestApiId": "MyApi",
              "Auth" : {
                "Authorizer" : "MyAuthorizer"
                }
            }
          }
        }
      }
    },
    "ConfigLambdaPermissionCreate":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Create", "Arn"]}
        }
      },
    "ConfigLambdaPermissionUpdate":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Update", "Arn"]}
        }
      },
    "ConfigLambdaPermissionGet":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Get", "Arn"]}
        }
      },
    "ConfigLambdaPermissionGetAll":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "GetAll", "Arn"]}
        }
      }
  },
  "Outputs": {
    "ApiURL": {
      "Description": "API endpoint URL for Prod environment",
      "Value": {
        "Fn::Sub": "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      }
    },
    "UserPoolId": {
      "Description": "User Pool Id",
      "Value": {"Fn::Sub": "${BlogPostUserPool}"}
    },
    "UserPoolClientId": {
      "Description": "App Client Id",
      "Value": {"Fn::Sub": "${BlogPostUserPoolClient}"}
    },
    "IdentityPoolId": {
      "Description": "Identity Pool Id",
      "Value": {"Fn::Sub": "${BlogPostIdentityPool}"}
    }
  }
}
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application for a blog API.",
  "Resources": {
    "MyApi": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
          "MethodSettings": [
              {"HttpMethod":"GET", "ResourcePath": "/"},
              {"HttpMethod":"GET", "ResourcePath": "/blog/{id}"},
              {"HttpMethod":"POST", "ResourcePath": "/blog/"},
              {"HttpMethod":"PUT", "ResourcePath": "/blog/{id}"}
              ],
          "StageName": "Prod",
          "Cors": {
              "AllowMethods": "'*'",
              "AllowOrigin": "'*'"
          }
        }
      },
    "Get": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsGetById::Get",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/{id}",
              "Method": "GET",
              "RestApiId": "MyApi"
            }
          }
        }
      }
    },
    "GetAll": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsGetAll::Get",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "RestApiId": "MyApi"
            }
          }
        }
      }
    },
    "Create": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsCreate::Create",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonRDSDataFullAccess",
          "AmazonS3FullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/",
              "Method": "POST",
              "RestApiId": "MyApi"
            }
          }
        }
      }
    },
    "Update": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "AWSBlogCSharp::AWSBlogCSharp.BlogPostsUpdate::Update",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 30,
        "Role": null,
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          "SecretsManagerReadWrite",
          "AmazonS3FullAccess",
          "AmazonRDSDataFullAccess"
        ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/blog/{id}",
              "Method": "PUT",
              "RestApiId": "MyApi"
            }
          }
        }
      }
    },
    "ConfigLambdaPermissionCreate":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Create", "Arn"]}
        }
      },
    "ConfigLambdaPermissionUpdate":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Update", "Arn"]}
        }
      },
    "ConfigLambdaPermissionGet":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "Get", "Arn"]}
        }
      },
    "ConfigLambdaPermissionGetAll":
      {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
         "Action" : "lambda:InvokeFunction",
         "Principal": "*",
         "FunctionName": {"Fn::GetAtt" : [ "GetAll", "Arn"]}
        }
      }
  },
  "Outputs": {
    "ApiURL": {
      "Description": "API endpoint URL for Prod environment",
      "Value": {
        "Fn::Sub": "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      }
    }
  }
}